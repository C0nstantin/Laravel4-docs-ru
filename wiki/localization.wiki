== Локализация ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=16.08.2013}}
{{Meta оригинал=doc4:localization}}

{{TOC}}

== Введение ==
Класс %%Lang%% даёт возможность удобного получения языковых строк, позволяя вашему приложению поддерживать несколько языков интерфейса.

== Языковые файлы ==
Языковые строки хранятся в папке %%(t)app/lang%%. Внутри неё должны располагаться подпапки - языки, поддерживаемые приложением:
%%(t)
/app
  /lang
    /en
      messages.php
    /es
      messages.php
%%

Языковые файлы (скрипты) просто возвращают массив пар //ключ/значение//.

**Пример языкового файла:**
%%
  <?php

  return array(
    'welcome' => 'Добро пожаловать на мой сайт!'
  );
%%

Язык по умолчанию указан в файле настроек %%(t)app/config/app.php%%. Вы можете изменить текущий язык во время работы вашего приложения методом %%App::setLocale()%%.

**Изменение языка по умолчанию "на лету":**
%%
  App::setLocale('es');
%%

== Основы использования ==
**Получение строк из языкового файла:**
%%
  echo Lang::get('messages.welcome');
%%

Первый компонент, передаваемый методу %%get()%% - имя языкового файла, а затем указывается имя строки, которую нужно получить.

.(alert)
**Внимание:** если строка не найдена, то метод %%get()%% вернёт её путь (ключ).

Вы также можете использовать ((helpers функцию)) %%trans()%% - короткий способ вызова метода %%Lang::get()%%:
%%
  echo trans('messages.welcome');
%%

**Замена параметров внутри строк.**

Сперва определите параметр в языковой строке:
%%
  'welcome' => 'Welcome, :name',
%%

Затем передайте массив вторым аргументом методу %%Lang::get()%%:
%%
  echo Lang::get('messages.welcome', array('name' => 'Dayle'));
%%

**Проверка существования языковой строки:**
%%
  if (Lang::has('messages.welcome')) {
    //
  }
%%

== Множественное число ==
Формы множественного числа - проблема для многих языков, так как все они имеют разные сложные правила для их получения. Однако вы можете легко справиться с ней в ваших языковых файлах используя символ %%(t)|%% для разделения форм единственного и множественного числа.

%%
  'apples' => 'There is one apple|There are many apples',
%%

Для получения такой строки используется метод %%Lang::choice()%%:
%%
  echo Lang::choice('messages.apples', 10);
%%

Благодаря тому, что Laravel использует компонент //Symfony Translation// вы можете легко создать более точные правила для проверки числа:
%%
  'apples' => '{0} There are none|[1,19] There are some|[20,Inf] There are many',
%%