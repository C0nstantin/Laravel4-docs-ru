== Работа с e-mail ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=16.08.2013}}
{{Meta оригинал=doc4:mail}}

{{TOC}}

== Настройка ==
Laravel предоставляет простой интерфейс к популярной библиотеке ((http://swiftmailer.org/ SwiftMailer)). Главный файл настроек - %%(t)app/config/mail.php%%; он содержит всевозможные параметры, позволяющие вам менять SMTP-сервер, порт, логин, пароль, а также устанавливать глобальный адрес **From** для исходящих сообщений. Вы можете использовать любой SMTP-сервер, либо стандартную функцию PHP ((php:mail)) - для этого установите параметр **driver** в значение %%(t)mail%%. Кроме того, доступен драйвер %%(t)sendmail%%.

== Основы использования ==
Метод %%Mail::send()%% используется для отправки сообщения:
%%
  Mail::send('emails.welcome', $data, function ($message) {
    $message->to('foo@example.com', 'Джон Смит')->subject('Привет!');
  });
%%

Первый параметр - имя ((templates шаблона)), который должен использоваться для текста сообщения. Второй - %%$data%%, массив переменных, передаваемых в шаблон. Третий - функция-замыкание, позволяющая вам настроить новое сообщения.

.(alert)
**Внимание:** переменная %%$message%% всегда передаётся в ваш шаблон и позволяет вам прикреплять вложения. Таким образом, вам не стоит передавать одноимённую переменную в параметре %%$data%%.

В дополнение к телу сообщения в формате HTML вы можете указать текстовое представление:
%%
  Mail::send(array('html.view', 'text.view'), $data, $callback);
%%

Вы также можете оставить только один формат, передав массив с ключом %%(t)html%% или %%(t)text%%:
%%
  Mail::send(array('text' => 'view'), $data, $callback);
%%

Вы можете указывать другие настройки для сообщения, например, копии или вложения:
%%
  Mail::send('emails.welcome', $data, function ($message) {
    $message->from('us@example.com', 'Laravel');

    $message->to('foo@example.com')->cc('bar@example.com');

    $message->attach($pathToFile);
  });
%%

При добавлении файлов можно указывать их ((ВП:MIME))-тип и/или отображаемое имя:
%%
  $message->attach($pathToFile, array('as' => $display, 'mime' => $mime));
%%

.(alert)
Объект, передаваемый замыканию метода %%Mail::send()%%, наследует класс собщения SwiftMailer, что позволяет вам вызывать любые методы для создания своего сообщения.

== Добавление строчных вложений ==
Обычно добавление строчных вложений - утомительное занятие, однако Laravel делает его проще, позволяя вам добавлять файлы и получать соответствующие CID.

.(tl_note)
Строчные вложения - файлы, не видимые получателю в списке вложений, но используемые внутри HTML-тела сообщения; CID - уникальный идентификатор внутри данного сообщения, используемый вместо URL в таких атрибутах, как %%(t)src%% - //прим. пер.//

**Добавление картинки в шаблон сообщения:**
%%
  <body>
    Вот какая-то картинка:

    <img src="<?php echo $message->embed($pathToFile); ?>">
  </body>
%%

**Добавление файла из потока данных:**
%%
  <body>
    А вот картинка, полученная из строки с данными:

    <img src="<?php echo $message->embedData($data, $name); ?>">
  </body>
%%

Переменная **$message** всегда передаётся шаблонам сообщений классом %%Mail%%.

== Очереди отправки ==
Из-за того, что отправка сообщений может сильно повлиять на время обработки запроса многие разработчики помещают их в очередь на отправку. Laravel позволяет делать это, используя ((queues единое API очередей)). Для помещения сообщения в очередь просто используйте метод %%Mail::queue()%%.

**Помещение сообщения в очередь отправки:**
%%
  Mail::queue('emails.welcome', $data, function ($message) {
    $message->to('foo@example.com', 'Джон Смит')->subject('Привет!');
  });
%%

Вы можете задержать отправку сообщения на нужное число секунд методом %%later()%%:
%%
  Mail::later(5, 'emails.welcome', $data, function ($message) {
    $message->to('foo@example.com', 'Джон Смит')->subject('Привет!');
  });
%%

Если же вы хотите поместить сообщение в определённую очередь отправки, то используйте методы %%queueOn()%% и %%laterOn()%%:
%%
  Mail::queueOn('queue-name', 'emails.welcome', $data, function ($message) {
    $message->to('foo@example.com', 'Джон Смит')->subject('Привет!');
  });
%%

== Локальная разработка ==
При разработке приложения обычно предпочтительно отключить доставку отправляемых сообщений. Для этого вы можете либо вызывать метод %%Mail::pretend()%%, либо установить параметр **pretend** в значение %%true%% в файле настроек %%(t)app/config/mail.php%%. Когда это сделано, сообщения будут записываться в файл ((errors журнала)) вашего приложения, вместо того, чтобы быть отправленными получателю.

**Включение симуляции отправки:**
%%
  Mail::pretend();
%%